from telethon import TelegramClient, events, Button
from telethon.tl.functions.messages import GetMessageReactionsListRequest
from telethon.utils import get_display_name
from html import escape
import re

# üëâ –í—Å—Ç–∞–≤—å —Å–≤–æ–π –±–æ—Ç-—Ç–æ–∫–µ–Ω
BOT_TOKEN = "7750701657:AAEA1fcXNS4B1EtTh8OeB6-83aLkuubZ5LE"
api_id = 22065196
api_hash = "035da06d12ecf7f788dc59b5af91fac0"
client = TelegramClient("bot_session", api_id, api_hash).start(bot_token=BOT_TOKEN)

def transform_text(text):
    text = text.replace("‚ö†Ô∏è", "‚úÖ", 1)
    text = re.sub(r'`–û–ñ–ò–î–ê–ï–¢ –û–ü–õ–ê–¢–´`', '`–û–ü–õ–ê–ß–ï–ù–û`', text, count=1)
    text = re.sub(
        r'‚ö†Ô∏è \*\*–í —Å—Ç–∞—Ç—É—Å–µ \*\*`–û–ñ–ò–î–ê–ï–¢ –û–ü–õ–ê–¢–´`.*',
        '‚úÖ **–í —Å—Ç–∞—Ç—É—Å–µ **`–û–ü–õ–ê–ß–ï–ù–û`** –≤—ã –º–æ–∂–µ—Ç–µ –æ–∂–∏–¥–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞.**',
        text,
        flags=re.DOTALL
    )
    return text

async def send_confirmation_message(event):
    confirmation_text = "‚úÖ **–í—ã –æ–ø–ª–∞—Ç–∏–ª–∏ —Å–¥–µ–ª–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è.**"
    
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É —Å –≥–∞–ª–æ—á–∫–æ–π
    button = [Button.inline("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", b"confirm_receipt")]
    
    await event.respond(
        confirmation_text,
        buttons=button
    )

@client.on(events.NewMessage(forwards=True))
async def handle_forwarded(event):
    msg = event.message

    if not msg.text:
        await event.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç.")
        return

    try:
        updated_text = transform_text(msg.text)
        buttons = [
            [Button.inline("üëà –ù–∞–∑–∞–¥", b"back"), 
             Button.inline("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", b"refresh")]
        ]
        
        await event.respond(
            updated_text,
            buttons=buttons
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await send_confirmation_message(event)

    except Exception as e:
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@client.on(events.CallbackQuery(data=b"confirm_receipt"))
async def confirm_receipt_handler(event):
    await event.respond("üéâ **–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!**")

print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
client.run_until_disconnected()